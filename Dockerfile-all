# jupyter-langs:all
# VERSION 1.4.0
FROM hero/jupyter-langs:zeromq

# Install SPARQL
RUN pip install sparqlkernel && \
    jupyter sparqlkernel install

# Install R
RUN conda install --quiet --yes \
            'r-base' \
            'r-irkernel' \
            'r-plyr' \
            'r-devtools' \
            'r-tidyverse' \
            'r-shiny' \
            'r-rmarkdown' \
            'r-forecast' \
            'r-rsqlite' \
            'r-reshape2' \
            'r-nycflights13' \
            'r-caret' \
            'r-rcurl' \
            'r-crayon' \
            'r-randomforest' \
            'r-tensorflow' \
    && conda build purge-all

# Install Javascript
RUN curl -sL https://deb.nodesource.com/setup_11.x | bash - && \
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - && \
    echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
        yarn \
        nodejs \
    && rm -rf /var/lib/apt/lists/*
RUN yarn global add ijavascript && \
    ijsinstall

# Install anyenv
ENV SHELL=/bin/bash
RUN git clone https://github.com/anyenv/anyenv $HOME/.anyenv && \
    echo 'export PATH="$HOME/.anyenv/bin:$PATH"' >> ~/.bashrc && \
    echo 'eval "$(anyenv init -)"' >> $HOME/.bashrc && \
    exec $SHELL -l
ENV PATH="$HOME/.anyenv/bin:$PATH"
RUN anyenv install --force-init

# Install Ruby
ENV RUBY_VERSION=2.6.1
RUN anyenv install rbenv && \
    eval "$(anyenv init -)" && \
    rbenv install ${RUBY_VERSION} && \
    rbenv global $RUBY_VERSION
RUN eval "$(anyenv init -)" && \
    gem install --no-document \
                cztop \
                sciruby \
                daru \
                nyaplot \
                iruby \
    && iruby register --force

# golang Install
ENV GO_VERSION=1.11.5 \
    GOPATH=/go
ENV PATH=$GOPATH/bin:/usr/local/go/bin:$PATH
RUN wget -O go.tgz https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go.tgz && \
    rm go.tgz
RUN go get -u github.com/gopherdata/gophernotes && \
    mkdir -p $HOME/.local/share/jupyter/kernels/gophernotes && \
    cp -r /go/src/github.com/gopherdata/gophernotes/kernel/* $HOME/.local/share/jupyter/kernels/gophernotes

# Rust install
ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/usr/local/cargo/bin:$PATH \
    RUST_VERSION=1.32.0
RUN set -eux; \
    dpkgArch="$(dpkg --print-architecture)"; \
    case "${dpkgArch##*-}" in \
        amd64) rustArch='x86_64-unknown-linux-gnu'; rustupSha256='2d4ddf4e53915a23dda722608ed24e5c3f29ea1688da55aa4e98765fc6223f71' ;; \
        armhf) rustArch='armv7-unknown-linux-gnueabihf'; rustupSha256='be85f50dc70ee239c5bb6acb60080797841a1e7c45fbf6bae15d6bd4b37ce0e5' ;; \
        arm64) rustArch='aarch64-unknown-linux-gnu'; rustupSha256='454f00a86be75ab070149bac1f541a7b39e5d3383d6da96ad2b929867ed40167' ;; \
        i386) rustArch='i686-unknown-linux-gnu'; rustupSha256='179e3b39f11037a708874e750081f7c0d3e1a6a4c431c2ecee2295acc7b696af' ;; \
        *) echo >&2 "unsupported architecture: ${dpkgArch}"; exit 1 ;; \
    esac; \
    url="https://static.rust-lang.org/rustup/archive/1.16.0/${rustArch}/rustup-init"; \
    wget "$url"; \
    echo "${rustupSha256} *rustup-init" | sha256sum -c -; \
    chmod +x rustup-init; \
    ./rustup-init -y --no-modify-path --default-toolchain $RUST_VERSION; \
    rm rustup-init; \
    chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
    rustup --version; \
    cargo --version; \
    rustc --version;
RUN cargo install evcxr_jupyter && \
    evcxr_jupyter --install